
/* Encoder Library - This library must be included in the IDE in order for this program to work

 * The library can be downloaded at the URL below 

 * http://www.pjrc.com/teensy/td_libs_Encoder.html

 */

 

//#define ENCODER_OPTIMIZE_INTERRUPTS

#include <Encoder.h>

#include "pins_arduino.h"

 

Encoder wheelEnc(2, 3);

 

/*

//These constants determine the distances for the speed-up and full speed portions

int const halfmeterstart = -5916; 

int const eighthalfmeterfast = -99837;

 

//These constants determine the distances for the slow down and stop incriments

int long ninemeterend       = -105729;

int long ninehalfmeterend   = -111730;

int const tenmeterend        = -117470;

int const tenhalfmeterend    = -123439;     

int const elevenmeterend     = -129289;

int const elevenhalfmeterend = -135216;

int const twelvemeterend     = -142840;

 

int const long unsigned tolerance = 400;

*/

 

// These variables assign the pins of the various inputs and outputs

int  long unsigned binaryout = 0;     // variable to store the binary value to run the car a specified distance

int  presses   = 0;                   // variable to store the number of presses the binary 

int  BinButton = A1;                  // pin to connect the binary Button

int  GoSwitch  = A2;                  // pin to connect the start Button

int  relay1    = 4;                   // pin to connect to relay1

int  relay2    = 5;                   // pin to connect to relay2

int  relay3    = 6;                   // pin to connect to relay3

int  relay4    = 7;                   // pin to connect to relay4

 

// These variables assign the pins of the binary lights

int ledPin[] = {8,9,10,11,12};        // Array where the LEDs are connected

const byte pinCount = 5;              // how many leds

 

// These constants determine the debonce parameters

long time = 0;                        // used for debounce

long debounce = 100;                  // how many ms to "debounce"

 

/*

// These constants must be 'volatile' to be used with the interrupt functions

volatile int count = 0;

*/

 

void setup() {

  // Incriment through the binary lights, setting them each as outputs

  for (int i =0;i<5;i++)

  {

    pinMode(ledPin[i], OUTPUT);

  }

  // Assign the inputs and outputs as such

  pinMode(BinButton, INPUT_PULLUP);

  pinMode(GoSwitch,  INPUT_PULLUP);

  pinMode(relay1,    OUTPUT);

  pinMode(relay2,    OUTPUT);

  pinMode(relay4,    OUTPUT);

 

  digitalWrite(relay1, HIGH);

  digitalWrite(relay2, HIGH);

  digitalWrite(relay4, HIGH);

 

  Serial.begin(9600);

}

 

void loop() {

  

    // Check if the GO switch has been pressed, and then run the car

    if (digitalRead(BinButton) == LOW)

    {

     if(millis() - time > debounce) presses++;

     time = millis();

    }

    

    // Check if the GO switch has been pressed, and then run the car

    if (digitalRead(GoSwitch) == LOW)

    {

     if(millis() - time > debounce) compete(binaryout);

     time = millis();

    }

    

    displayBinary(presses);

 

    // Serial Print values

    Serial.print("Presses: ");

    Serial.print(presses);

    Serial.print("     Distance: ");

    Serial.print(abs(wheelEnc.read()));

    Serial.print("     switch: ");

    Serial.println(binaryout);    

 

    // use the number of presses to assign travel distance

    switch(presses){

      case 1:

        binaryout = 105729;

        break;

      case 2:

        binaryout = 111730;

        break;

      case 3:

        binaryout = 117470;

        break;

      case 4:

        binaryout = 123439;

        break;

      case 5:

        binaryout = 129289;

        break;

      case 6:

        binaryout = 135216;

        break;

      case 7:

        binaryout = 142840;

        break;

      case 8:

        binaryResetDisplay();

        presses = 0;

        break;

      default:

        binaryout = 99837;

      break;  

    }  

}

 

 

void compete (int long unsigned binaryout){

  Serial.println(binaryout);

  delay(500);

  time = 0;

 

while (millis() - time < 1000000){                            //for 1000 second, work to hit the target location

  if(abs(wheelEnc.read()) < (binaryout - 400)){               //move forward until you are very cose to the target

    digitalWrite(relay1, LOW);

    digitalWrite(relay2, LOW);

    digitalWrite(relay4, LOW); 

    Serial.println(wheelEnc.read()); 

    time = millis();

    delay(5);  

  }else if(abs(wheelEnc.read()) > (binaryout + 400)){         //move backward once the target is overshot

    digitalWrite(relay1, HIGH);

    digitalWrite(relay2, HIGH);

    digitalWrite(relay4, LOW); 

    Serial.println(wheelEnc.read()); 

    time = millis();

    delay(5);  

  }else{

    digitalWrite(relay1, LOW);                                 //cut power when on target

    digitalWrite(relay2, LOW);

    digitalWrite(relay4, HIGH); 

    Serial.println(wheelEnc.read()); 

    time = millis();

    delay(5);    

    }

  }

}

 

 

void displayBinary(byte numToShow){       // Someone brilliantly wrote this code for the binary display. Thank you internet.

  for (int i =0;i<5;i++){

    if (bitRead(numToShow, i)==1){

      digitalWrite(ledPin[i], HIGH); 

    }else{

      digitalWrite(ledPin[i], LOW); 

    }

  }

}

 

 

void binaryResetDisplay(){

   // loop from the lowest pin to the highest:

   for (int thisPin = 0; thisPin < pinCount; thisPin++) {

    // turn the pin on:

    digitalWrite(ledPin[thisPin], HIGH);

    delay(100);

    // turn the pin off:

    digitalWrite(ledPin[thisPin], LOW);

    }

  // loop from the highest pin to the lowest:

  for (int thisPin = pinCount - 1; thisPin >= 0; thisPin--) {

    // turn the pin on:

    digitalWrite(ledPin[thisPin], HIGH);

    delay(100);

    // turn the pin off:

    digitalWrite(ledPin[thisPin], LOW);

  }

}

